#!/usr/bin/env bash
#yayfzf2.sh
########################################
#[============== YAYFZF ==============]#
########################################

##-------- OPTIONS --------##
packages_sort_by="votes"
packages_search_by="Description"
use_color="always"
REQUESTSPLITN=100

#searchFunction="yay --sync --search --quiet --sortby $packages_sort_by $SearchInput" #(not currently used)
detailedPreview="yay --sync --info --info --verbose --color $use_color "
installPackage="yay --sync --verbose --color $use_color --nobatchinstall --confirm"
##-------------------------##

PRODUCTNAME="yayfzf"
VERSION="0.1.2"
LICENSE="GNU General Public License, version 3"
WEBSITE="https://github.com/ConnerWill/yayfzf"
AUTHOR="ConnerWill"
DATE="2022-05-05"



_keybinding_file="../config/KEYBINDINGS.conf"
[[ -e "$_keybinding_file" ]] \
	&& source "$_keybinding_file" \
	|| KEYBINDINGS=""


function _version() {
	cat <<EOS
========================================================
    NAME    :    ${PRODUCTNAME}
    VERSION :    v${VERSION}
    DATE    :    ${DATE}
    LICENCE :    ${LICENSE}
    AUTHOR  :    ${AUTHOR}
    WEBSITE :    ${WEBSITE}/${AUTHOR}
========================================================
EOS
}

function _help() {
	cat <<EOS

    NAME
        yayfzf

    DESCRIPTION
        search and install packages from the AUR with fzf

    USAGE
        yayfzf    KEYWORDS...
        yayfzf    -h|--help
        yayfzf    -V|--version

    KEYBINDINGS
$KEYBINDINGS

========================================================
EOS
}

SHORTKEYBINDINGS="\
Alt+d           Install Package(s)
[Tab/Ctl+Tab]   [Select/Deselect]
Page[Dn/Up]     Page [Down/up]
[Home/End]      [Top/Bottom]
Ctrl+/          Change Layout
?|Ctl+h         Help
Esc|Ctl+q       Exit"

function _short_help() {
	cat <<EOS
$SHORTKEYBINDINGS
EOS
}

##---------------##
### Main Script ###
##---------------##

## Error messege
function _err() {
	printf "\n[\e[31m WARNING \e[m] %s\n" "${*}"
	echo -e -n "\nSearch yay\n\nInput Required!\nPlease Enter Initial Search Query: "
	read -r SearchInput
	[[ -z "$SearchInput" ]] && return 1
	_main "${SearchInput}"
}

## Check if user sent a search query when running.
## If no input received, show warning and the help menu,
## then prompt for input. If input is still empty, Exit.

function _main() {
	local input
	input="${*}"
	if [[ -z "${input}" ]]; then
		_list_packagemgr | _fzf
	fi
	for arg in "${input[@]}"; do
		case "${arg}" in
		-h | --help)
			_help
			return 0
			;;
		-V | --version)
			_version
			return 0
			;;
		esac
	done
	clear
	_search_packagemgr "${*}" | _fzf "${*}"
}


## Search package manager

function _search_packagemgr() {
	local searchQuery
	searchQuery="${*}"
	yay --sync --search --quiet --singlelineresults \
				--sortby "${packages_sort_by}" \
				--searchby "${packages_search_by}" \
				"$searchQuery"
}

function _list_packagemgr(){
				yay --sync --list --quiet --singlelineresults \
						--sortby "$packages_sort_by" 
}


		#--header "${KEYBINDINGS}" \
## Main script. Run fzf with package manager search results.
function _fzf() {
	tput smcup
	local SearchInput
	SearchInput="${*}"
	fzf </dev/stdin \
		--query "$SearchInput" \
		--print-query \
		--select-1 \
		--exit-0 \
		--no-clear \
		--extended \
		--tac \
		--no-sort \
		--keep-right \
		--color='hl:#00ffff,hl+:#ff00ff,fg:#505050,fg+:#00ffff,bg:#010101,bg+:#202020,query:#00ff00,info:#9090a0,spinner:#ff00ff,border:#ff00ff,preview-fg:#ffffff,preview-bg:#200050,marker:#00ff00,gutter:#101010,pointer:#ff00ff,info:#020202' \
		--header "${SearchInput}" \
		--header-first \
		--header-lines=0 \
		--multi \
		--marker="âœ” " \
		--prompt="> " \
		--pointer="[>" \
		--info=inline \
		--height=100% \
		--ansi \
		--layout 'default' \
		--preview "$detailedPreview {}" \
		--preview-window "right:65%" \
		--margin 0%,0% \
		--padding 3%,2% \
		--border "rounded" \
		--delimiter=" " \
		--tabstop=4 \
		--filepath-word \
		--scroll-off=0 \
		--hscroll-off=100 \
		--expect=ctrl-c,esc \
		--bind "alt-d:execute: echo 'Installing: {+}' && sleep 1 && $installPackage {+} || echo '\nERROR Installing: {+}\nReturn to yayfzf? (Y/n' ; read -s -q || exit ||  echo  'Return to yayfzf? (Y/n)' ; read -s -q || exit" \
		--bind 'pgdn:page-down' \
		--bind 'pgup:page-up' \
		--bind 'home:last' \
		--bind 'end:first' \
		--bind 'ctrl-/:change-preview-window(up,border-rounded|up,40%,border-rounded|left,border-rounded|left,border-rounded,40%|down,border-rounded|down,40%,border-rounded|down,10%,border-rounded|hidden|right,40%,border-rounded|right,70%,border-rounded|right,90%,border-rounded)' \
		--bind 'ctrl-v:toggle-preview' \
		--bind "?:preview: less $SHORTKEYBINDINGS" \
		--bind "f1:preview: echo $SHORTKEYBINDINGS" \
		--bind "ctrl-h:preview: echo $SHORTKEYBINDINGS" \
		--bind 'tab:toggle' \
		--bind 'shift-tab:deselect' \
		--bind 'ctrl-d:deselect-all' \
		--bind 'alt-left:kill-word' \
		--bind 'alt-bspace:clear-query' \
		--bind 'ctrl-l:clear-query' \
		--bind 'ctrl-q:print-query' \
		--bind "esc:accept"

	tput rmcup
}

function yayfzf() {
	_main "${@}"
}

##---------------##
###  END MAIN   ###
##---------------##


### TODO:
##
##      Add Next/Previous page function
###
#        --bind "ctrl-n:reload(_next_page)"  \
#        --bind "ctrl-p:reload(_previous_page)
#
#   gh_page_number_max=3
#
#    function _next_page(){
#        [[ "$gh_page_number" -lt "$gh_page_number_max" ]] && gh_page_number=$((gh_page_number-1))
#        _main "$query"
#        return
#    }
#
#    function _previous_page(){
#        [[ "$gh_page_number" -gt 1 ]] && gh_page_number=$((gh_page_number-1))
#        _main "$query"
#        return
#    }
###

### TODO
#        --bind "ctrl-i:header ${SHORTKEYBINDINGS}" \
