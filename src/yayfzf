#!/usr/bin/env bash
#shellcheck disable=2034
########################################
#[============== YAYFZF ==============]#
########################################
##-------- OPTIONS --------##
packages_sort_by="votes"
use_color="always"

#searchFunction="yay --sync --search --quiet --sortby $packages_sort_by $SearchInput" #(not currently used)
detailedPreview="yay --sync --info --info --verbose --color $use_color "
installPackage="yay -syv && yay --sync --verbose --color $use_color --nobatchinstall --confirm"
updatePackages="yay -syuv"
##-------------------------##

##---------------##
### Main Script ###
##---------------##

## Help
function _help(){

      printf "\e[0;1;4;38;5;12mUSAGE\e[0m\n\n"
      printf "\t\e[0;38;5;255myayfzf \e[0;38;5;8m[OPTIONS] \e[0;38;5;8m[QUERY] \n\n"

      printf "\e[0;1;4;38;5;12mOPTIONS\e[0m\n\n"
      printf "\t\e[0;38;5;245m-a\e[0;38;5;249m|\e[0;38;5;245m--all\e[0;38;5;8m            \e[0;38;5;255m\t: List all packages in repository\e[0m\n"
      printf "\t\e[0;38;5;245m-s\e[0;38;5;249m|\e[0;38;5;245m--search \e[0;38;5;240m<string>\e[0;38;5;255m\t: Search for packages using search query\e[0m\n"
      printf "\t\e[0;38;5;245m-q\e[0;38;5;249m|\e[0;38;5;245m--query  \e[0;38;5;240m<string>\e[0;38;5;255m\t: Search for packages using search query\e[0m\n"
      printf "\t\e[0;38;5;245m-i\e[0;38;5;249m|\e[0;38;5;245m--installed\e[0;38;5;8m      \e[0;38;5;255m\t: List installed packages\e[0m\n"
      printf "\t\e[0;38;5;245m-V\e[0;38;5;249m|\e[0;38;5;245m--version\e[0;38;5;8m        \e[0;38;5;255m\t: Show version\e[0m\n"
      printf "\t\e[0;38;5;245m-h\e[0;38;5;249m|\e[0;38;5;245m--help\e[0;38;5;8m           \e[0;38;5;255m\t: Show this help menu\e[0m\n\n"
      return 0
}

## Error messege
function _err() {
  printf "\n[\e[31m WARNING \e[m] %s\n" "${*}"
  echo -e -n "\nSearch yay\n\nInput Required!\nPlease Enter Initial Search Query: "
  read -r SearchInput
  [[ -z "$SearchInput" ]] && return 1
  _main "${SearchInput}"
}

## Check if user sent a search query when running.
## If no input received, show warning and the help menu,
## then prompt for input. If input is still empty, Exit.
function _main() {
  local input
  input="${*}"
  for arg in "${input[@]}"; do
    case "${arg}" in
      -h | --help)
        _help
        return 0
        ;;
      -V | --version)
        _version
        return 0
        ;;
      -i | --installed)
        _list_installed_packagemgr | _fzf "${*}"
        return $?
        ;;
      -a | --all)
        _list_packagemgr | fzf "${*}"

        return $?
        ;;
      -s | --search)
        _search_packagemgr "$@" | _fzf "${*}"
        return $?
        ;;
      -q | --query)
        _search_packagemgr "$@" | _fzf "${*}"
        return $?
        ;;
      *)
        if [[ -z "${input}" ]]; then
          _list_packagemgr | _fzf "${*}"
          return $?
        else
          _list_packagemgr | _fzf "${*}"
          return $?
        fi
        ;;
    esac
  done
}

## Search packages
function _search_packagemgr() {
  local searchQuery
  searchQuery="${*}"
  yay --sync --search --quiet --singlelineresults \
    --sortby "${packages_sort_by}" \
    "$searchQuery"
}

## List all packages
function _list_packagemgr() {
    yay --sync --list --quiet --singlelineresults \
      --sortby "$packages_sort_by"
}

## List all installed packages
function _list_installed_packagemgr() {
    yay --query --singlelineresults \
      --sortby "$packages_sort_by"
}
  #--header "${KEYBINDINGS}" \
## Main script. Run fzf with package manager search results.
function _fzf() {
  tput smcup
  # trap 'tput rmcup' SIGINT
  local SearchInput SearchHeader
  SearchInput="${*}"
  [[ -n "${SearchInput}" ]] && SearchHeader="Search:  '${SearchInput}'"
  fzf </dev/stdin \
    --query "$SearchInput" \
    --print-query \
    --select-1 \
    --exit-0 \
    --no-clear \
    --extended \
    --tac \
    --no-sort \
    --keep-right \
    --color='hl:#00ffff,hl+:#ff00ff,fg:#505050,fg+:#00ffff,bg:#010101,bg+:#202020,query:#00ff00,info:#9090a0,spinner:#ff00ff,border:#ff00ff,preview-fg:#ffffff,preview-bg:#200050,marker:#00ff00,gutter:#101010,pointer:#ff00ff,info:#020202' \
    --header "${SearchHeader}" \
    --header-first \
    --header-lines=0 \
    --multi \
    --marker="âœ” " \
    --prompt="> " \
    --pointer="[>" \
    --info=inline \
    --height=100% \
    --ansi \
    --layout 'default' \
    --preview "$detailedPreview {}" \
    --preview-window "right:65%" \
    --margin 0%,0% \
    --padding 3%,2% \
    --border "rounded" \
    --delimiter=" " \
    --tabstop=4 \
    --filepath-word \
    --scroll-off=0 \
    --hscroll-off=100 \
    --expect=ctrl-c,esc \
    --bind "alt-d:execute: echo 'Installing: {+}' && sleep 1 && yay -Sv {+} ; echo 'Press ENTER' && read -r" \
    --bind "alt-u:execute: echo 'Updating ...' && sleep 1 ; yay -Syuv; echo 'Press ENTER' && read -r" \
    --bind 'pgdn:page-down' \
    --bind 'pgup:page-up' \
    --bind 'home:last' \
    --bind 'end:first' \
    --bind 'ctrl-/:change-preview-window(up,border-rounded|up,40%,border-rounded|left,border-rounded|left,border-rounded,40%|down,border-rounded|down,40%,border-rounded|down,10%,border-rounded|hidden|right,40%,border-rounded|right,70%,border-rounded|right,90%,border-rounded)' \
    --bind 'ctrl-v:toggle-preview' \
    --bind 'tab:toggle' \
    --bind 'shift-tab:deselect' \
    --bind 'ctrl-d:deselect-all' \
    --bind 'alt-left:kill-word' \
    --bind 'alt-bspace:clear-query' \
    --bind 'ctrl-l:clear-query' \
    --bind 'ctrl-q:print-query' \
    --bind 'ctrl-c:accept' \
    --bind "esc:accept"
  #  --bind "ctrl-h:preview(echo '$(_sysz_keys)')" \
 #   --bind "f1:preview(echo '$(_sysz_keys)')" \
 #   --bind "?:preview(echo '$(_sysz_keys)')"
  tput rmcup
  returnSIG=$?
  echo $returnSIG
  return $returnSIG
}

# TODO: intend to use the current status of package manager search instead of sleep
function while_loading(){
  local i colori
		timeout --preserve-status 10 \
		sleep 2 >/dev/null 2>&1 &
		T1=${!}
		i=1
		while ps -p ${T1} &>/dev/null; do
				# for ((i = 0; i < 13; i++)); do
			if [[ ${i} -gt 254 ]]; then
				i=0
			else
				i+=1
			fi
			colori="$i"
      #shellcheck disable=2059
			printf "\e[0;1;38;5;${colori}myayfzf\e[0m"
			sleep 0.05
			clear
		done
}

function print-centered {
	SURROUNDING_CHAR=""
  [[ $# == 0 ]] \
    && printf "\n\e[0;1;38;5;196mNo parameter given\e[0m" >&2 \
    && printf "\nUsage:\n\t\e[0;1;38;5;46m%s \e[0;38;5;15m\"<phrase to center>\" \"<1 char to fill empty space>\" \e[0;38;5;240m[<number of columns>] [<1 char to surround the whole result>\e[0m\n" "${0}" >&2 \
    && return 1
  declare -i NB_COLS
  [[ $# -ge 3 ]] && NB_COLS=$3 || NB_COLS="$(tput cols)"
  [[ $# -ge 4 ]] && SURROUNDING_CHAR=${4:0:1} && NB_COLS=$((NB_COLS - 2 ))
  declare -i str_len="${#1}"
  [[ $str_len -ge $NB_COLS ]] && echo "$1" && return 0            # Simply displays the text if it exceeds the maximum length
  declare -i filler_len="$(( (NB_COLS - str_len) / 2 ))"          # Build the chars to add before and after the given text
  [[ $# -ge 2 ]] && ch="${2:0:1}" || ch=" "
  filler=""; for (( i = 0; i < filler_len; i++ )); do
  filler="${filler}${ch}" ; done
  printf "%s%s${2}%s%s" "${SURROUNDING_CHAR}" "$filler" "${1}" "$filler"  # Add an additional filler char at the end if the result length is not even
  [[ $(( (NB_COLS - str_len) % 2 )) -ne 0 ]] && printf "%s" "${ch}"
  printf "%s\n" "${SURROUNDING_CHAR}"
  return 0
}

function progress_bar(){
    barr=''
    echo -e "\e[?25l" # hide cursor
    for (( y=50; y <= 100; y++ )); do
        sleep 0.05
        barr="${barr} "
        echo -ne "\r"
        echo -ne "\e[48;5;${y}m$barr\e[0m"
        local left="$(( 100 - y ))"
        printf " %${left}s"
        echo -ne "\e[38;5;${left}m${y}%\e[0m"
    done
    echo -e "\e[?25h" # Show cursor
    echo -e "\n"
}

function yayfzf() {
  _main "${@}"
}

##---------------##
###  END MAIN   ###
##---------------##
